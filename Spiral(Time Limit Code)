 ////////////////////////////////////////////////////////////////////////////////////////
 ////////////////////////http://ntucoder.net/Problem/Details/5611////////////////////////
 ////////////////////////////////////////////////////////////////////////////////////////
 
    #include <iostream>
    #include <stdio.h>
    #include <queue>
    using namespace std;
    enum eDirection {UP, DOWN, LEFT , RIGHT};
    eDirection dir;
    queue <int> QX, QY;
    int t, n, x, y, startX, startY, finishX, finishY, A[10000][10000], B[10000][10000];

    int UCLN(int numberA, int numberB)
    {
        while (numberA != numberB){
            if (numberA > numberB){
                numberA -= numberB;
            }else{
                numberB -= numberA;
            }
        }
        return numberA;
    }

    void Setup(int n)
    {
        int u = 1, v = 1, count = 1;
        dir = RIGHT;

        for (int i = 0; i <= n+1; i ++){
            A[i][0]     = -1;
            A[i][n+1]   = -1;
            A[0][i]     = -1;
            A[n+1][i]   = -1;
            ///////////////////////////
            B[i][0]     = -1;
            B[i][n+1]   = -1;
            B[0][i]     = -1;
            B[n+1][i]   = -1;
        }
        for (int i = 1; i <= n; i ++){
            for (int j = 1; j <= n; j ++){
                A[i][j] = 0;
                B[i][j] = 0;
            }
        }

        A[1][1] = 1;
        for (int i = 1; i <= n*n-1; i ++){
            if (count == x){
                startX = u;
                startY = v;
            }
            if (count == y){
                finishX = u;
                finishY = v;
            }
            count ++;
            switch (dir){
            case UP:
                u --;
                A[u][v] = count;
                break;
            case DOWN:
                u ++;
                A[u][v] = count;
                break;
            case LEFT:
                v --;
                A[u][v] = count;
                break;
            case RIGHT:
                v ++;
                A[u][v] = count;
                break;
            }

            if (dir == UP && A[u-1][v] != 0){
                dir = RIGHT;
            }
            if (dir == RIGHT && A[u][v+1] != 0){
                dir = DOWN;
            }
            if (dir == DOWN && A[u+1][v] != 0){
                dir = LEFT;
            }
            if (dir == LEFT && A[u][v-1] != 0){
                dir = UP;
            }
        }
        if (x == n*n){
            startX = u;
            startY = v;
        }
        if (y == n*n){
            finishX = u;
            finishY = v;
        }
    }

    void Spread(int startX, int startY)
    {
        if (B[startX-1][startY] == 0 && UCLN(A[startX][startY], A[startX-1][startY]) == 1){
            B[startX-1][startY] = B[startX][startY] + 1;
            QX.push(startX-1);
            QY.push(startY);
        }
        if (B[startX+1][startY] == 0 && UCLN(A[startX][startY], A[startX+1][startY]) == 1){
            B[startX+1][startY] = B[startX][startY] + 1;
            QX.push(startX+1);
            QY.push(startY);
        }
        if (B[startX][startY-1] == 0 && UCLN(A[startX][startY], A[startX][startY-1]) == 1){
            B[startX][startY-1] = B[startX][startY] + 1;
            QX.push(startX);
            QY.push(startY-1);
        }
        if (B[startX][startY+1] == 0 && UCLN(A[startX][startY], A[startX][startY+1]) == 1){
            B[startX][startY+1] = B[startX][startY] + 1;
            QX.push(startX);
            QY.push(startY+1);
        }
    }

    int main()
    {
        freopen("spiral.inp", "r", stdin);
        freopen("spiral.out", "w", stdout);

        cin >> t;
        for (int i = 1; i <= t; i ++){
            cin >> n >> x >> y;
            Setup(n);
            B[startX][startY] = 0;
            QX.push(startX);
            QY.push(startY);
            while (QX.size()){
                int a = QX.front();
                int b = QY.front();
                QX.pop();
                QY.pop();
                Spread(a, b);
            }
            B[startX][startY] = 0;
            if (B[finishX][finishY] >= 0){
                cout << B[finishX][finishY] << endl;
            }else{
                cout << -1 << endl;
            }
        }
    }
