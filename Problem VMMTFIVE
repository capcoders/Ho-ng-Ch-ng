///////////////////////////////////////////////
/// https://vn.spoj.com/problems/VMMTFIVE/
/// Warning : Code is not optimal
///////////////////////////////////////////////

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#define edge 4
using namespace std;
int A[edge+1][edge+1], Row[edge+1], Col[edge+1];   // Row la hang, Col la cot
bool C[edge*edge];

void Inkq()
{
    for (int i = 1; i <= edge; i ++){
        for (int j = 1; j <= edge; j ++){
            cout << A[i][j] << " ";
        }
        cout << endl;
    }
    //exit(0);
    cout << endl;
}

void Try(int i, int j)
{
    for (int k = 1; k <= edge*edge; k ++){
        if (C[k] == false && A[i][0] + k <= Row[i] && A[0][j] + k <= Col[j]){
            A[i][j] = k;
            if (i == edge && j == edge){
                Inkq();
            }
            else
            {
                if (j == edge){
                    C[k] = true;
                    A[i][0] += k;
                    A[0][j] += k;
                    Try(i+1, 1);
                    C[k] = false;
                    A[i][0] -= k;
                    A[0][j] -= k;
                }
                else{
                    C[k] = true;
                    A[i][0] += k;
                    A[0][j] += k;
                    Try(i,j+1);
                    C[k] = false;
                    A[i][0] -= k;
                    A[0][j] -= k;
                }
            }
        }
    }
}

int main()
{
    freopen("VMMTFIVE.inp","r",stdin);
    freopen("VMMTFIVE.out","w",stdout);

    for (int i = 1; i <= edge; i ++){
        cin >> Row[i];
    }
    for (int i = 1; i <= edge; i ++){
        cin >> Col[i];
    }

    Try(1, 1);

    return 0;
}
